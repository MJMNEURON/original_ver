
load_file("nrngui.hoc")
//----------------------------------------------------------------------------
// interneuron topology
//----------------------------------------------------------------------------
load_file("INmodel.hoc")

//----------------------------------------------------------------------------
// retinal axon
//----------------------------------------------------------------------------
create retinal_axon
//tc200_cc.oc
retinal_axon {
	insert pas
	g_pas = 3.79e-5
	e_pas = -76.5		// to fit current-clamp data (was -71 to -73)
	cm = 0.88
	Ra = 173

	insert hh2		// insert fast spikes
	ena = 50
	ek = -100
	vtraub_hh2 = -52
	gnabar_hh2 = 0.01		// adapted to single-compartment
	gkbar_hh2 = 0.01 		// adapted to single-compartment

	insert itGHK		// T-current everywhere
	cai = 2.4e-4 
	cao = 2 
	eca = 120 
	shift_itGHK = -1	// screening charge shift + 3 mV error
	gcabar_itGHK = 0.0002
	pcabar_itGHK = 8e-5
	qm_itGHK = 2.5
	qh_itGHK = 2.5
	
	insert cad		// calcium diffusion everywhere
	depth_cad = 0.1
	kt_cad = 0		// no pump
	kd_cad = 1e-4
	taur_cad = 5
	cainf_cad = 2.4e-4	
}


objectvar rstim // insert current injection

retinal_axon rstim = new IClamp(.5)
rstim.del = 0
rstim.dur = 1e9 // dur has to be infinite when used with vector playing 
rstim.amp = 0

objref fspikes, vecspikes, vecstim
fspikes=new File()
fspikes.ropen("contrast/cs3_09.dat")
vecspikes=new Vector()
vecstim = new Vector(4000,0)
vecspikes.scanf(fspikes)
for total=0, vecspikes.size()-1{
    vecstim.x( int(vecspikes.x(total)*1000) ) = 4000
}
vecspikes.printf()
vecstim.play( &rstim.amp, 1 )


// Definition of the list of NetCon objects representing synapses to the retinal axon
objectvar syn2retinal_axon
syn2retinal_axon = new List()




//----------------------------------------------------------------------------
// retina -> relay AMPA 
//----------------------------------------------------------------------------
objectvar syn // won't be any different if using objref
soma_in syn = new AMPA(0.5)

Prethresh_AMPA = 0 // (mV) voltage level nec for release
retinal_axon syn2retinal_axon.append( new NetCon(&v(0.5), syn, Prethresh_AMPA, 0, 0.1) )



//----------------------------------------------------------------------------
// transient time
//----------------------------------------------------------------------------
trans = 00

print " "
print ">> Transient time of ",trans," ms"
print " "

//----------------------------------------------------------------------------
// setup simulation parameters
//----------------------------------------------------------------------------
Dt = 0.2
npoints = 12500

dt = 0.1			// must be submultiple of Dt
tstart = trans
tstop = trans + npoints * Dt
runStopAt = tstop
steps_per_ms = 1/Dt

celsius = 34			// temperature of John's experiments

v_init = -74			// approximate resting Vm

//----------------------------------------------------------------------------
// adding graph(s): http://senselab.med.yale.edu/ModelDB/ShowModel.asp?model=18198&file=\SYN_NEW\gabab3.hoc
//----------------------------------------------------------------------------
objectvar g[20]         // max 20 graphs
ngraph = 0

proc addgraph() { local ii  // define subroutine to add a new graph
                // addgraph("variable", minvalue, maxvalue)
    ngraph = ngraph+1
    ii = ngraph-1
    g[ii] = new Graph()
    g[ii].size(0,tstop,$2,$3)
    g[ii].xaxis()
    g[ii].yaxis()
    g[ii].addvar($s1,1,0)
    g[ii].save_name("graphList[0].")
    graphList[0].append(g[ii])
}

addgraph("v(0.5)",-80,40)
g.addvar("soma_in.v(0.5)", 2, 0.1) //red
g.addvar("retinal_axon.v(0.5)",3,0.1) //blue

//addgraph("retinal_axon.v(0.5)", -80,40)
addgraph("soma_in.v(0.5)",-80,40)
addgraph("dend_in[1].v(0.5)",-80,40)
addgraph("dend_in[16].v(0.5)",-80,40)

//----------------------------------------------------------------------------
// save data
//----------------------------------------------------------------------------
objref recv, rect, savspike, cortexr

rect = new Vector()
recv = new Vector()
rect.record(&t)
recv.record(&soma_in.v(0.5))//recording from relay cell

run()
//myrun()

savspike = new File()
savspike.wopen("data/interneuron.dat")
timestep=0 
timestepi=0
total=0 
totali=0
printf("interneuron")


for i=0 && total=0, rect.size()-1 {
    if (recv.x[i] >= 0 && timestep + 1 < rect.x(i)){
	timestep=rect.x(i)
	total=total+1
	printf("%g\n", total)
	printf("%g\n", timestep)
	savspike.printf("%g\n", timestep)
	}
}


savspike.close()
