load_file("nrngui.hoc")


xopen("files/re80.geo") // read geometry file

//corrD = 1     // dendritic surface correction

forall {      // insert passive current everywhere
  insert pas
  g_pas = 5e-5 // * 1  // (from simfit)
//  e_pas = -72.843   // (from simfit)
  e_pas = -82   // corrected for liquid junction potential

  cm = 1 //* 1    // (from simfit)
  Ra = 260    // (from simfit)
  L = L
}

forall {
  insert it2    // T-current everywhere
  cai = 2.4e-4 
  cao = 2 
  eca = 120 
  shift_it2 = 0   // no shift of ITs
  gcabar_it2 = 0.0002
  qm_it2 = 2.5    // low q10
  qh_it2 = 2.5

  insert cad    // calcium diffusion everywhere
  depth_cad = 1 // NEED TO BE RESCALED
  kt_cad = 0    // no pump
  kd_cad = 1e-4
  taur_cad = 5
  cainf_cad = 2.4e-4  
}


soma_re {
//  g_pas = 5e-5    // (from simfit)
//  cm = 1      // (from simfit)

  insert hh2    // insert fast spikes
  ena = 50
  ek = -100
  vtraub_hh2 = -67  // threshold for spikes is low
  gnabar_hh2 = 0.1
  gkbar_hh2 = 0.08

}

xopen("files/loc80.oc") // load procedure for localizing T-current
localize(4.5e-5, 4.5e-5, 6e-4)  // initial distribution of T-current


xopen("files/leak.oc")  // load dc current injection
access soma_re
add_dc(0.1)   // set 0.1 nA dc current to adjust to -65 mV



//----------------------------------------------------------------------------
// retinal axon
//----------------------------------------------------------------------------
create retinal_axon
//tc200_cc.oc
retinal_axon {
      insert pas
      g_pas = 3.79e-5
      e_pas = -76.5   // to fit current-clamp data (was -71 to -73)
      cm = 0.88
      Ra = 173

      insert hh2    // insert fast spikes
      ena = 50
      ek = -100
      vtraub_hh2 = -52
      gnabar_hh2 = 0.01   // adapted to single-compartment
      gkbar_hh2 = 0.01    // adapted to single-compartment

      insert itGHK    // T-current everywhere
      cai = 2.4e-4 
      cao = 2 
      eca = 120 
      shift_itGHK = -1  // screening charge shift + 3 mV error
      gcabar_itGHK = 0.0002
      pcabar_itGHK = 8e-5
      qm_itGHK = 2.5
      qh_itGHK = 2.5

      insert cad    // calcium diffusion everywhere
      depth_cad = 0.1
      kt_cad = 0    // no pump
      kd_cad = 1e-4
      taur_cad = 5
      cainf_cad = 2.4e-4  
}




objectvar rstim // insert current injection

retinal_axon rstim = new IClamp(.5)
rstim.del = 0
rstim.dur = 1e9 // dur has to be infinite when used with vector playing 
rstim.amp = 0

objref fspikes, vecspikes, vecstim
fspikes=new File()
fspikes.ropen("contrast/cs4_08.dat")
vecspikes=new Vector()
vecstim = new Vector(4000,0)
vecspikes.scanf(fspikes)
for total=0, vecspikes.size()-1{
    vecstim.x( int(vecspikes.x(total)*1000) ) = 4000
}
vecspikes.printf()
vecstim.play( &rstim.amp, 1 )


// Definition of the list of NetCon objects representing synapses to the retinal axon
objectvar syn2retinal_axon
syn2retinal_axon = new List()



//----------------------------------------------------------------------------
// RETINA -> RELAY (AMPA, excitatory)
//----------------------------------------------------------------------------

objectvar syn // won't be any different if using objref
soma_re syn = new AMPA(0.5)

Prethresh_AMPA = 0 // (mV) voltage level nec for release
retinal_axon syn2retinal_axon.append( new NetCon(&v(0.5), syn, Prethresh_AMPA, 0, 0.1) )


/*
//////////////////////////////////////////////////////////////////////////////
//////////////////// Setting up RETINA -> LGN connections ////////////////////
//////////////////////////////////////////////////////////////////////////////
//------------------ RETINA -> RELAY (AMPA, excitatory) ----------------------

objectvar syn, spta, con // won't be any different if using objref
objref time, id, rec, tobj
time=new Vector()
id=new Vector()
rec= new List()
soma_re syn = new AMPA(0.5)
soma_re spta = new NetStim(0.5)
// Possion train generator, 20Hz for spta as in Sakmann and Creutzfeldt, 1969
// time course: 2500ms; # of spikes: 50; mean inter-spike interval: 50ms
spta.interval= 50
spta.number= 35
spta.start=0
spta.noise=1
con=new NetCon(spta, syn, 0, 0, 0.4)
*/

//----------------------------------------------------------------------------
// transient time
//----------------------------------------------------------------------------
trans = 00

print " "
print ">> Transient time of ",trans," ms"
print " "

//----------------------------------------------------------------------------
// setup simulation parameters
//----------------------------------------------------------------------------
Dt = 0.2
npoints = 12500

dt = 0.1      // must be submultiple of Dt
tstart = trans
tstop = trans + npoints * Dt
runStopAt = tstop
steps_per_ms = 1/Dt

celsius = 34      // temperature of John's experiments

v_init = -74      // approximate resting Vm

//----------------------------------------------------------------------------
// adding graph(s): http://senselab.med.yale.edu/ModelDB/ShowModel.asp?model=18198&file=\SYN_NEW\gabab3.hoc
//----------------------------------------------------------------------------
objectvar g[20]         // max 20 graphs
ngraph = 0

proc addgraph() { local ii  // define subroutine to add a new graph
                // addgraph("variable", minvalue, maxvalue)
    ngraph = ngraph+1
    ii = ngraph-1
    g[ii] = new Graph()
    g[ii].size(0,tstop,$2,$3)
    g[ii].xaxis()
    g[ii].yaxis()
    g[ii].addvar($s1,1,0)
    g[ii].save_name("graphList[0].")
    graphList[0].append(g[ii])
}

addgraph("v(0.5)",-80,40)
g.addvar("soma_re.v(0.5)", 2, 0.1) //red
g.addvar("retinal_axon.v(0.5)",3,0.1) //blue

//addgraph("dend4[0].v(0.5)",-80,40)
addgraph("soma_re.v(0.5)",-80,40)
//addgraph("dend_re2[4].v(0.5)",-80,40)
//addgraph("dend4[18].v(0.5)",-80,40)
//addgraph("dend8[20].v(0.5)",-80,40)


//----------------------------------------------------------------------------
// save data
//----------------------------------------------------------------------------
objref recvretic, rectretic, savspikeretic, cortexrretic
rectretic = new Vector()
recvretic = new Vector()
cortexrretic=new Vector()
rectretic.record(&t)
recvretic.record(&soma_re.v(0.5))//recording from reticular cell

run()
//myrun()

savspikeretic = new File()
savspikeretic.wopen("data/reticular.dat")
timestepretic=0 
timestepiretic=0
totalretic=0 
totaliretic=0
printf("reticular cell")

for i=0 && totalretic=0, rectretic.size()-1 {
    if (recvretic.x[i] >= -15 && timestepretic + 1 < rectretic.x(i)){
    timestepretic=rectretic.x(i)
    totalretic=totalretic+1
    printf("%g\n", totalretic)
    printf("%g\n", timestepretic)
    savspikeretic.printf("%g\n", timestepretic)
}
}

savspikeretic.close()
